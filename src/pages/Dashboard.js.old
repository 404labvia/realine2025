// src/pages/Dashboard.js
import React, { useState, useEffect, useCallback } from 'react';
import { usePratiche } from '../contexts/PraticheContext';
import { format, isPast, isToday, addMonths, startOfMonth, endOfMonth, startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isSameDay, addDays, parseISO } from 'date-fns';
import { it } from 'date-fns/locale';
import { 
  FaChevronLeft, 
  FaChevronRight, 
  FaUsers, 
  FaSpinner, 
  FaCheckCircle,
  FaCalendarDay,
  FaCalendarWeek,
  FaCalendarAlt,
  FaExclamationTriangle,
  FaSyncAlt,
  FaClock,
  FaGoogle
} from 'react-icons/fa';
import { 
  MdAssignment, 
  MdDateRange, 
  MdAttachMoney, 
  MdMoneyOff, 
  MdAccountBalance,
  MdCheck,
  MdEvent,
  MdLowPriority,
  MdOutlinePriorityHigh
} from 'react-icons/md';
import { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title } from 'chart.js';
import { Doughnut, Bar } from 'react-chartjs-2';
import googleCalendarService from '../services/GoogleCalendarService';
import { handleToggleTaskItem, handleSetTaskDueDate } from './PratichePage/handlers/taskHandlers';
import { signInWithGoogle, isGoogleCalendarAuthenticated } from '../firebase';

// Register ChartJS components
ChartJS.register(ArcElement, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

function Dashboard() {
  const { pratiche, loading, updatePratica } = usePratiche();
  
  // Stato per i filtri dei grafici
  const [filtroStatoDistribuzione, setFiltroStatoDistribuzione] = useState('In Corso');
  const [filtroStatoFatturato, setFiltroStatoFatturato] = useState('Tutte');
  
  // Stato per la paginazione delle task
  const [currentTaskPage, setCurrentTaskPage] = useState(1);
  const tasksPerPage = 10;
  
  // Stato per visualizzazione calendario
  const [currentDate, setCurrentDate] = useState(new Date());
  const [calendarView, setCalendarView] = useState('month'); // 'month', 'week', 'day'
  const [googleEvents, setGoogleEvents] = useState([]);
  const [isLoadingEvents, setIsLoadingEvents] = useState(false);
  const [lastSync, setLastSync] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [showTaskDetails, setShowTaskDetails] = useState(null);
  
  // Stati per le task
  const [pendingTasks, setPendingTasks] = useState([]);
  const [upcomingDeadlines, setUpcomingDeadlines] = useState([]);
  const [taskFilter, setTaskFilter] = useState('all'); // 'all', 'today', 'week', 'overdue'
  
  // Verifica autenticazione Google Calendar all'avvio
  useEffect(() => {
    const authenticated = isGoogleCalendarAuthenticated();
    setIsAuthenticated(authenticated);
    
    if (authenticated) {
      fetchEvents();
    }
  }, []);
  
  // Estrai tutte le task non completate dalle pratiche
  useEffect(() => {
    if (!loading) {
      const allTasks = [];
      
      pratiche.forEach(pratica => {
        if (pratica.workflow && pratica.workflow.inizioPratica && pratica.workflow.inizioPratica.tasks) {
          pratica.workflow.inizioPratica.tasks.forEach((task, index) => {
            if (!task.completed) {
              allTasks.push({
                praticaId: pratica.id,
                taskIndex: index,
                taskText: task.text,
                praticaIndirizzo: pratica.indirizzo,
                praticaCliente: pratica.cliente,
                createdDate: task.createdDate || pratica.dataInizio,
                dueDate: task.dueDate || null,
                priority: task.priority || 'normal',
                googleCalendarEventId: task.googleCalendarEventId || null,
                autoCreated: task.autoCreated || false,
                stepId: 'inizioPratica'
              });
            }
          });
        }
      });
      
      // Ordina le task non completate: prima quelle con scadenza (per data), poi quelle senza scadenza (per data creazione)
      const sortedTasks = allTasks.sort((a, b) => {
        // Se una ha scadenza e l'altra no
        if (a.dueDate && !b.dueDate) return -1;
        if (!a.dueDate && b.dueDate) return 1;
        
        // Se entrambe hanno scadenza, ordina per scadenza
        if (a.dueDate && b.dueDate) {
          return new Date(a.dueDate) - new Date(b.dueDate);
        }
        
        // Se nessuna ha scadenza, ordina per data creazione
        return new Date(a.createdDate) - new Date(b.createdDate);
      });
      
      setPendingTasks(sortedTasks);
      
      // Estrai le scadenze imminenti (prossimi 7 giorni)
      const today = new Date();
      const nextWeek = addDays(today, 7);
      const upcoming = sortedTasks
        .filter(task => task.dueDate && new Date(task.dueDate) <= nextWeek)
        .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));
      
      setUpcomingDeadlines(upcoming);
    }
  }, [pratiche, loading]);
  
  // Funzione per sincronizzare eventi da Google Calendar
  const fetchEvents = useCallback(async () => {
    if (!isGoogleCalendarAuthenticated()) {
      return;
    }
    
    setIsLoadingEvents(true);
    
    try {
      // Ottiene eventi per il mese corrente
      const firstDay = startOfMonth(currentDate);
      const lastDay = endOfMonth(currentDate);
      
      const events = await googleCalendarService.getEvents(
        firstDay,
        lastDay
      );
      
      setGoogleEvents(events);
      setLastSync(new Date());
    } catch (error) {
      console.error('Errore nel recupero eventi da Google Calendar:', error);
    } finally {
      setIsLoadingEvents(false);
    }
  }, [currentDate]);
  
  // Carica eventi quando cambia la data o la vista
  useEffect(() => {
    if (isAuthenticated) {
      fetchEvents();
    }
  }, [fetchEvents, isAuthenticated, currentDate, calendarView]);
  
  // Filtra le task in base al filtro selezionato
  const getFilteredTasks = () => {
    const today = new Date();
    const endOfToday = new Date(today);
    endOfToday.setHours(23, 59, 59, 999);
    
    const nextWeek = addDays(today, 7);
    
    switch (taskFilter) {
      case 'today':
        return pendingTasks.filter(task => 
          task.dueDate && isToday(new Date(task.dueDate))
        );
      case 'week':
        return pendingTasks.filter(task => 
          task.dueDate && new Date(task.dueDate) <= nextWeek && new Date(task.dueDate) >= today
        );
      case 'overdue':
        return pendingTasks.filter(task => 
          task.dueDate && isPast(new Date(task.dueDate)) && !isToday(new Date(task.dueDate))
        );
      case 'high':
        return pendingTasks.filter(task => task.priority === 'high');
      default:
        return pendingTasks;
    }
  };
  
  const filteredTasks = getFilteredTasks();
  
  // Calcola gli indici delle task da visualizzare nella pagina corrente
  const indexOfLastTask = currentTaskPage * tasksPerPage;
  const indexOfFirstTask = indexOfLastTask - tasksPerPage;
  const currentTasks = filteredTasks.slice(indexOfFirstTask, indexOfLastTask);
  const totalTaskPages = Math.ceil(filteredTasks.length / tasksPerPage);
  
  // Funzione per gestire il toggle di una task
  const handleToggleTask = async (praticaId, stepId, taskIndex) => {
    try {
      // Trova la pratica
      const pratica = pratiche.find(p => p.id === praticaId);
      if (!pratica || !pratica.workflow || !pratica.workflow[stepId]) return;
      
      // Usa l'handler per gestire il completamento della task
      await handleToggleTaskItem(
        praticaId, 
        stepId, 
        taskIndex, 
        true, // Completa la task
        updatePratica, 
        pratiche, 
        (updatedPratiche) => {
          // Dopo aver aggiornato la pratica, aggiorna lo stato delle task nella dashboard
          const updatedTasks = pendingTasks.filter(task => 
            !(task.praticaId === praticaId && task.taskIndex === taskIndex && task.stepId === stepId)
          );
          
          setPendingTasks(updatedTasks);
          
          // Aggiorna anche le scadenze imminenti
          const updatedDeadlines = upcomingDeadlines.filter(task =>
            !(task.praticaId === praticaId && task.taskIndex === taskIndex && task.stepId === stepId)
          );
          
          setUpcomingDeadlines(updatedDeadlines);
        }
      );
    } catch (error) {
      console.error('Errore durante l\'aggiornamento della task:', error);
      alert('Si è verificato un errore durante l\'aggiornamento. Riprova.');
    }
  };
  
  // Funzione per sincronizzare con Google Calendar
  const handleGoogleAuth = async () => {
    try {
      const result = await signInWithGoogle();
      
      if (result && result.token) {
        setIsAuthenticated(true);
        fetchEvents();
      } else {
        alert("Autenticazione non riuscita. Riprova.");
      }
    } catch (error) {
      console.error("Errore durante l'autenticazione Google:", error);
      alert("Si è verificato un errore durante l'autenticazione. Riprova.");
    }
  };
  
  // Gestione paginazione task
  const handleTaskPageChange = (pageNumber) => {
    setCurrentTaskPage(pageNumber);
  };
  
  // Navigazione calendario
  const navigatePrev = () => {
    if (calendarView === 'month') {
      setCurrentDate(prevDate => addMonths(prevDate, -1));
    } else if (calendarView === 'week') {
      setCurrentDate(prevDate => addDays(prevDate, -7));
    } else if (calendarView === 'day') {
      setCurrentDate(prevDate => addDays(prevDate, -1));
    }
  };

  const navigateNext = () => {
    if (calendarView === 'month') {
      setCurrentDate(prevDate => addMonths(prevDate, 1));
    } else if (calendarView === 'week') {
      setCurrentDate(prevDate => addDays(prevDate, 7));
    } else if (calendarView === 'day') {
      setCurrentDate(prevDate => addDays(prevDate, 1));
    }
  };

  const navigateToday = () => {
    setCurrentDate(new Date());
  };
  
  // Conteggio delle pratiche
  const praticheInCorso = pratiche.filter(pratica => pratica.stato === 'In Corso').length;
  const praticheCompletate = pratiche.filter(pratica => pratica.stato === 'Completata').length;
  
  // Calcolo valore pratiche in corso
  const valoreInCorso = pratiche
    .filter(pratica => pratica.stato === 'In Corso')
    .reduce((acc, pratica) => acc + (pratica.importoTotale || 0), 0);
  
  // Calcolo pagamenti ricevuti e da ricevere
  const calcolaPagamenti = () => {
    let totaleRicevutoInCorso = 0;
    let fatturatoTotale = 0;
    
    pratiche.forEach(pratica => {
      let importoRicevuto = 0;
      
      if (pratica.workflow) {
        const passiPagamento = ['acconto1', 'acconto2', 'saldo'];
        
        passiPagamento.forEach(passo => {
          if (pratica.workflow[passo] && pratica.workflow[passo].importoCommittente) {
            importoRicevuto += pratica.workflow[passo].importoCommittente;
          }
        });
      } 
      else if (pratica.steps) {
        // Retrocompatibilità
        if (pratica.steps.acconto1?.completed && pratica.steps.acconto1?.importo) {
          importoRicevuto += pratica.steps.acconto1.importo;
        }
        
        if (pratica.steps.acconto2?.completed && pratica.steps.acconto2?.importo) {
          importoRicevuto += pratica.steps.acconto2.importo;
        }
        
        if (pratica.steps.saldo?.completed && pratica.steps.saldo?.importo) {
          importoRicevuto += pratica.steps.saldo.importo;
        }
      }
      
      fatturatoTotale += importoRicevuto;
      
      if (pratica.stato === 'In Corso') {
        totaleRicevutoInCorso += importoRicevuto;
      }
    });
    
    return {
      fatturatoTotale,
      totaleRicevutoInCorso,
      totaleDaRicevere: valoreInCorso - totaleRicevutoInCorso
    };
  };
  
  const pagamenti = calcolaPagamenti();
  
  // GRAFICO: Distribuzione pratiche per agenzia
  const calcolaDistribuzioneAgenzie = () => {
    const distribuzioneAgenzie = {};
    
    const praticheFiltered = pratiche.filter(pratica => 
      filtroStatoDistribuzione === 'Tutte' || pratica.stato === filtroStatoDistribuzione
    );
    
    praticheFiltered
      .filter(pratica => pratica.agenzia && pratica.agenzia !== 'PRIVATO')
      .forEach(pratica => {
        if (!distribuzioneAgenzie[pratica.agenzia]) {
          distribuzioneAgenzie[pratica.agenzia] = 0;
        }
        distribuzioneAgenzie[pratica.agenzia]++;
      });
      
    return distribuzioneAgenzie;
  };
  
  const distribuzioneAgenzie = calcolaDistribuzioneAgenzie();
  
  // GRAFICO: Fatturato per agenzia
  const calcolaFatturatoPerAgenzia = () => {
    const fatturatoPerAgenzia = {};
    
    const praticheFiltered = pratiche.filter(pratica => 
      filtroStatoFatturato === 'Tutte' || pratica.stato === filtroStatoFatturato
    );
    
    praticheFiltered
      .filter(pratica => pratica.agenzia && pratica.agenzia !== 'PRIVATO')
      .forEach(pratica => {
        if (!fatturatoPerAgenzia[pratica.agenzia]) {
          fatturatoPerAgenzia[pratica.agenzia] = 0;
        }
        fatturatoPerAgenzia[pratica.agenzia] += pratica.importoTotale || 0;
      });
      
    return fatturatoPerAgenzia;
  };
  
  const fatturatoPerAgenzia = calcolaFatturatoPerAgenzia();
  
  // Colori per agenzie
  const agenzieColori = {
    'Barner CAMAIORE': '#4F46E5',    // Indigo
    'Barner LUCCA': '#10B981',       // Emerald
    'Barner ALTOPASCIO': '#F59E0B',  // Amber
    'Barner VIAREGGIO': '#EF4444',   // Red
    'Barner QUERCETA': '#8B5CF6',    // Violet
    'Barner PIETRASANTA': '#EC4899', // Pink
    'Barner PISA': '#06B6D4',        // Cyan
    'Barner MASSA': '#84CC16',       // Lime
    'BARNER LUCCA': '#3B82F6',       // Blue
  };
  
  // Dati per grafico torta distribuzione agenzie
  const totalePratiche = Object.values(distribuzioneAgenzie).reduce((sum, count) => sum + count, 0);
  
  const agenzieData = {
    labels: Object.keys(distribuzioneAgenzie).map(agenzia => {
      const count = distribuzioneAgenzie[agenzia];
      const percentage = ((count / totalePratiche) * 100).toFixed(1);
      return `${agenzia} (${percentage}%)`;
    }),
    datasets: [
      {
        data: Object.values(distribuzioneAgenzie),
        backgroundColor: Object.keys(distribuzioneAgenzie).map(agenzia => 
          agenzieColori[agenzia] || '#6B7280'
        ),
        borderWidth: 1,
      },
    ],
  };
  
  // Dati per grafico a barre fatturato per agenzia
  const agenzieFatturatoOrdinato = Object.entries(fatturatoPerAgenzia)
    .sort(([, fatturatoA], [, fatturatoB]) => fatturatoB - fatturatoA);
  
  const fatturatoAgenzieData = {
    labels: agenzieFatturatoOrdinato.map(([agenzia]) => agenzia),
    datasets: [
      {
        label: 'Fatturato per Agenzia (€)',
        data: agenzieFatturatoOrdinato.map(([, fatturato]) => fatturato),
        backgroundColor: agenzieFatturatoOrdinato.map(([agenzia]) => 
          agenzieColori[agenzia] || '#6B7280'
        ),
        borderWidth: 1,
      },
    ],
  };
  
  // Opzioni per grafici
  const torteOptions = {
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'bottom',
      },
      tooltip: {
        callbacks: {
          label: function(context) {
            const label = context.label || '';
            const value = context.raw || 0;
            return `${label.split('(')[0].trim()}: ${value} pratiche`;
          }
        }
      }
    },
  };
  
  // Renderizza vista mensile del calendario
  const renderMonthView = () => {
    const monthStart = startOfMonth(currentDate);
    const monthEnd = endOfMonth(currentDate);
    const startDate = startOfWeek(monthStart, { locale: it });
    const endDate = endOfWeek(monthEnd, { locale: it });
    
    const dateFormat = 'd';
    const dayFormat = 'EEEEEE';
    const monthYearFormat = 'MMMM yyyy';
    
    const days = [];
    const daysArray = eachDayOfInterval({ start: startDate, end: endDate });
    
    // Intestazioni dei giorni della settimana
    const daysOfWeek = [];
    for (let i = 0; i < 7; i++) {
      daysOfWeek.push(
        <div key={`header-${i}`} className="text-center font-medium py-2 border-b">
          {format(addDays(startDate, i), dayFormat, { locale: it }).toUpperCase()}
        </div>
      );
    }
    
    // Combina task, eventi e scadenze pratiche per la vista calendario
    const getEventsForDay = (date) => {
      const dateString = format(date, 'yyyy-MM-dd');
      
      // Task con scadenza in questo giorno
      const taskEvents = pendingTasks
        .filter(task => task.dueDate && format(new Date(task.dueDate), 'yyyy-MM-dd') === dateString)
        .map(task => ({
          id: `task-${task.praticaId}-${task.stepId}-${task.taskIndex}`,
          title: task.taskText,
          start: new Date(task.dueDate),
          color: task.priority === 'high' ? '#F97316' : // arancione per priorità alta
                 task.priority === 'low' ? '#10B981' : // verde per priorità bassa
                 '#3B82F6', // blu per priorità normale
          type: 'task',
          task
        }));
      
      // Eventi da Google Calendar
      const googleEventsForDay = googleEvents
        .filter(event => {
          const eventDate = event.start.dateTime ? 
            new Date(event.start.dateTime) : 
            new Date(event.start.date);
          return format(eventDate, 'yyyy-MM-dd') === dateString;
        })
        .map(event => ({
          id: event.id,
          title: event.summary,
          start: event.start.dateTime ? new Date(event.start.dateTime) : new Date(event.start.date),
          color: event.colorId ? getColorForGoogleEvent(event.colorId) : '#9CA3AF',
          type: 'google',
          googleEvent: event
        }));
      
      // Scadenze pratiche (dataFine)
      const praticheEvents = pratiche
        .filter(pratica => 
          pratica.dataFine && 
          format(new Date(pratica.dataFine), 'yyyy-MM-dd') === dateString
        )
        .map(pratica => ({
          id: `pratica-${pratica.id}`,
          title: `Scadenza: ${pratica.indirizzo}`,
          start: new Date(pratica.dataFine),
          color: '#DC2626', // rosso per scadenze
          type: 'pratica',
          pratica
        }));
      
      return [...taskEvents, ...googleEventsForDay, ...praticheEvents];
    };
    
    // Celle dei giorni
    daysArray.forEach(day => {
      const dateString = format(day, 'yyyy-MM-dd');
      const dayEvents = getEventsForDay(day);
      
      days.push(
        <div
          key={dateString}
          className={`min-h-24 border p-1 ${
            !isSameMonth(day, monthStart) ? 'bg-gray-100 text-gray-400' : 
            isSameDay(day, new Date()) ? 'bg-blue-50 border-blue-500' : ''
          }`}
        >
          <div className="flex justify-between items-center">
            <span className={`font-medium ${isSameDay(day, new Date()) ? 'text-blue-600' : ''}`}>
              {format(day, dateFormat)}
            </span>
            {dayEvents.length > 0 && (
              <span className="text-xs text-gray-500">{dayEvents.length}</span>
            )}
          </div>
          <div className="overflow-y-auto max-h-20">
            {dayEvents.map(event => (
              <div 
                key={event.id}
                className="text-xs mt-1 p-1 rounded truncate cursor-pointer"
                style={{ backgroundColor: event.color }}
                onClick={() => {
                  if (event.type === 'task') {
                    setShowTaskDetails(event.task);
                  }
                }}
              >
                {format(new Date(event.start), 'HH:mm')} {event.title}
              </div>
            ))}
          </div>
        </div>
      );
    });
    
    return (
      <div>
        <div className="text-xl font-bold mb-4 text-center">
          {format(currentDate, monthYearFormat, { locale: it })}
        </div>
        <div className="grid grid-cols-7 gap-0">
          {daysOfWeek}
          {days}
        </div>
      </div>
    );
  };
  
  // Funzione per convertire colorId di Google Calendar in colore esadecimale
  const getColorForGoogleEvent = (colorId) => {
    const colors = {
      '1': '#7986CB', // Lavanda
      '2': '#33B679', // Salvia
      '3': '#8E24AA', // Uva
      '4': '#E67C73', // Flamingo
      '5': '#F6BF26', // Banana
      '6': '#F4511E', // Mandarino
      '7': '#039BE5', // Pavone
      '8': '#616161', // Grafite
      '9': '#3F51B5', // Bluastro
      '10': '#0B8043', // Verde basilico
      '11': '#D50000'  // Pomodoro
    };
    return colors[colorId] || '#9CA3AF'; // Grigio come default
  };
  
  // Componente per mostrare i dettagli di una task
  const TaskDetailsModal = ({ task, onClose, onComplete }) => {
    if (!task) return null;
    
    const dueDate = task.dueDate ? new Date(task.dueDate) : null;
    const isOverdue = dueDate && isPast(dueDate) && !isToday(dueDate);
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white p-5 rounded-lg shadow-xl w-full max-w-md">
          <div className="flex justify-between items-start mb-4">
            <h2 className="text-lg font-semibold pr-4">{task.taskText}</h2>
            <button 
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600"
            >
              ×
            </button>
          </div>
          
          <div className="space-y-3">
            <div className="flex items-center">
              <MdAssignment className="text-blue-500 mr-2" size={18} />
              <span className="text-sm">
                Pratica: <strong>{task.praticaIndirizzo}</strong>
              </span>
            </div>
            
            <div className="flex items-center">
              <FaUsers className="text-blue-500 mr-2" size={16} />
              <span className="text-sm">
                Cliente: <strong>{task.praticaCliente}</strong>
              </span>
            </div>
            
            {dueDate && (
              <div className="flex items-center">
                <FaClock className={`mr-2 ${isOverdue ? 'text-red-500' : 'text-blue-500'}`} size={16} />
                <span className="text-sm">
                  Scadenza: <strong className={isOverdue ? 'text-red-500' : ''}>
                    {format(dueDate, 'dd/MM/yyyy HH:mm', { locale: it })}
                  </strong>
                  {isOverdue && <span className="ml-2 text-red-500 font-medium">(Scaduta)</span>}
                </span>
              </div>
            )}
            
            <div className="flex items-center">
              {task.priority === 'high' ? (
                <MdOutlinePriorityHigh className="text-orange-500 mr-2" size={18} />
              ) : task.priority === 'low' ? (
                <MdLowPriority className="text-green-500 mr-2" size={18} />
              ) : (
                <MdAssignment className="text-gray-500 mr-2" size={18} />
              )}
              <span className="text-sm">
                Priorità: <strong>
                  {task.priority === 'high' ? 'Alta' : 
                   task.priority === 'low' ? 'Bassa' : 'Normale'}
                </strong>
              </span>
            </div>
            
            <div className="flex items-center">
              <MdDateRange className="text-blue-500 mr-2" size={18} />
              <span className="text-sm">
                Creata il: <strong>
                  {format(new Date(task.createdDate), 'dd/MM/yyyy', { locale: it })}
                </strong>
              </span>
            </div>
            
            {task.googleCalendarEventId && (
              <div className="flex items-center">
                <FaGoogle className="text-green-500 mr-2" size={16} />
                <span className="text-sm">
                  Sincronizzata con Google Calendar
                </span>
              </div>
            )}
            
            {task.autoCreated && (
              <div className="flex items-center">
                <MdAssignment className="text-purple-500 mr-2" size={18} />
                <span className="text-sm">
                  Creata automaticamente da: <strong>{task.triggerSource}</strong>
                </span>
              </div>
            )}
          </div>
          
          <div className="mt-6 flex justify-end">
            <button
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 mr-3 hover:bg-gray-100"
            >
              Chiudi
            </button>
            <button
              onClick={() => {
                onComplete(task.praticaId, task.stepId, task.taskIndex);
                onClose();
              }}
              className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
            >
              Completa
            </button>
          </div>
        </div>
      </div>
    );
  };
  
  // Componente per i controlli di paginazione
  const Pagination = ({ currentPage, totalPages, onPageChange }) => {
    if (totalPages <= 1) return null;
    
    return (
      <div className="flex justify-end mt-2">
        <button 
          className={`px-2 py-1 mx-1 rounded ${currentPage === 1 ? 'text-gray-400' : 'bg-gray-200 hover:bg-gray-300'}`}
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
        >
          <FaChevronLeft size={14} />
        </button>
        <span className="px-2 py-1 text-sm">
          Pagina {currentPage} di {totalPages}
        </span>
        <button 
          className={`px-2 py-1 mx-1 rounded ${currentPage === totalPages ? 'text-gray-400' : 'bg-gray-200 hover:bg-gray-300'}`}
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
        >
          <FaChevronRight size={14} />
        </button>
      </div>
    );
  };

  if (loading) {
    return <div className="flex justify-center items-center h-full">Caricamento...</div>;
  }

  return (
    <div className="container mx-auto">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">Dashboard</h1>
      
      {/* Statistiche principali */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* Card Panoramica Pratiche */}
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-base text-gray-500 mb-6">Panoramica Pratiche</h2>
          <div className="grid grid-cols-3 gap-4">
            {/* Pratiche Totali */}
            <div className="flex items-center">
              <div className="p-3 rounded-md bg-purple-100 mr-3">
                <FaUsers className="text-purple-600 text-xl" />
              </div>
              <div>
                <p className="text-xs text-gray-500">Pratiche Totali</p>
                <h3 className="text-xl font-bold">{pratiche.length}</h3>
              </div>
            </div>
            
            {/* Pratiche In Corso */}
            <div className="flex items-center">
              <div className="p-3 rounded-md bg-blue-100 mr-3">
                <FaSpinner className="text-blue-600 text-xl" />
              </div>
              <div>
                <p className="text-xs text-gray-500">In Corso</p>
                <h3 className="text-xl font-bold">{praticheInCorso}</h3>
              </div>
            </div>
            
            {/* Pratiche Concluse */}
            <div className="flex items-center">
              <div className="p-3 rounded-md bg-green-100 mr-3">
                <FaCheckCircle className="text-green-600 text-xl" />
              </div>
              <div>
                <p className="text-xs text-gray-500">Concluse</p>
                <h3 className="text-xl font-bold">{praticheCompletate}</h3>
              </div>
            </div>
          </div>
        </div>
        
        {/* Card Situazione Finanziaria */}
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-base text-gray-500 mb-6">Situazione Finanziaria</h2>
          <div className="grid grid-cols-3 gap-4">
            {/* Fatturato Totale */}
            <div className="flex items-center">
              <div className="p-3 rounded-md bg-green-100 mr-3">
                <MdAccountBalance className="text-green-600 text-xl" />
              </div>
              <div>
                <p className="text-xs text-gray-500">Fatturato</p>
                <h3 className="text-xl font-bold">€{pagamenti.fatturatoTotale.toLocaleString('it-IT', {maximumFractionDigits: 0})}</h3>
              </div>
            </div>
            
            {/* Valore Pratiche in Corso */}
            <div className="flex items-center">
              <div className="p-3 rounded-md bg-blue-100 mr-3">
                <MdAttachMoney className="text-blue-600 text-xl" />
              </div>
              <div>
                <p className="text-xs text-gray-500">Pratiche in Corso</p>
                <h3 className="text-xl font-bold">€{valoreInCorso.toLocaleString('it-IT', {maximumFractionDigits: 0})}</h3>
              </div>
            </div>
            
            {/* Da Ricevere */}
            <div className="flex items-center">
              <div className="p-3 rounded-md bg-amber-100 mr-3">
                <MdMoneyOff className="text-amber-600 text-xl" />
              </div>
              <div>
                <p className="text-xs text-gray-500">Da Ricevere</p>
                <h3 className="text-xl font-bold">€{pagamenti.totaleDaRicevere.toLocaleString('it-IT', {maximumFractionDigits: 0})}</h3>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Sezione Task e Calendario */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* Task da Completare */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold text-gray-800">Task da Completare</h2>
            <div className="flex items-center">
              <select
                value={taskFilter}
                onChange={(e) => {
                  setTaskFilter(e.target.value);
                  setCurrentTaskPage(1); // Reset pagination on filter change
                }}
                className="p-1 text-sm border border-gray-300 rounded mr-2"
              >
                <option value="all">Tutte</option>
                <option value="today">Oggi</option>
                <option value="week">Questa settimana</option>
                <option value="overdue">Scadute</option>
                <option value="high">Alta priorità</option>
              </select>
            </div>
          </div>
          
          {currentTasks.length > 0 ? (
            <>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase w-10">
                        Status
                      </th>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                        Task
                      </th>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                        Pratica
                      </th>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                        Scadenza
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {currentTasks.map((task, index) => {
                      const dueDate = task.dueDate ? new Date(task.dueDate) : null;
                      const isOverdue = dueDate && isPast(dueDate) && !isToday(dueDate);
                      const isPriorityHigh = task.priority === 'high';
                      
                      return (
                        <tr 
                          key={`${task.praticaId}-${task.taskIndex}`} 
                          className={`
                            ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}
                            ${isOverdue ? 'bg-red-50' : ''}
                            ${isPriorityHigh && !isOverdue ? 'bg-yellow-50' : ''}
                            hover:bg-gray-100 cursor-pointer
                          `}
                          onClick={() => setShowTaskDetails(task)}
                        >
                          <td className="px-3 py-2 whitespace-nowrap">
                            <div className="flex items-center justify-center">
                              <input
                                type="checkbox"
                                className="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleToggleTask(task.praticaId, task.stepId, task.taskIndex);
                                }}
                              />
                            </div>
                          </td>
                          <td className="px-3 py-2">
                            <div className="text-sm text-gray-900 flex items-center">
                              {isPriorityHigh && <MdOutlinePriorityHigh className="text-orange-500 mr-1" size={16} />}
                              {isOverdue && <FaExclamationTriangle className="text-red-500 mr-1" size={14} />}
                              {task.googleCalendarEventId && <FaCalendarAlt className="text-green-600 mr-1" size={12} />}
                              {task.taskText}
                            </div>
                          </td>
                          <td className="px-3 py-2 whitespace-nowrap">
                            <div className="text-sm font-medium text-gray-900">{task.praticaIndirizzo}</div>
                            <div className="text-xs text-gray-500">{task.praticaCliente}</div>
                          </td>
                          <td className="px-3 py-2 whitespace-nowrap">
                            {dueDate ? (
                              <div className={`text-sm ${isOverdue ? 'text-red-600 font-medium' : 'text-gray-500'}`}>
                                {format(dueDate, 'dd/MM/yy HH:mm', { locale: it })}
                              </div>
                            ) : (
                              <div className="text-sm text-gray-500">
                                {format(new Date(task.createdDate), 'dd/MM/yy', { locale: it })}
                              </div>
                            )}
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
              <Pagination 
                currentPage={currentTaskPage} 
                totalPages={totalTaskPages} 
                onPageChange={handleTaskPageChange} 
              />
            </>
          ) : (
            <div className="text-center py-10 text-gray-500">
              <MdCheck size={40} className="mx-auto mb-2" />
              <p>Non ci sono task da completare con questo filtro</p>
            </div>
          )}
        </div>
        
        {/* Calendario con integrazione Google Calendar */}
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold text-gray-800">Calendario</h2>
            
            {!isAuthenticated ? (
              <button 
                className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center text-sm"
                onClick={handleGoogleAuth}
              >
                <FaGoogle className="mr-1" size={12} />
                Connetti Google Calendar
              </button>
            ) : (
              <div className="flex items-center">
                <button 
                  className="p-1 border border-gray-300 rounded-md hover:bg-gray-100 text-gray-500 mr-2"
                  onClick={fetchEvents}
                  disabled={isLoadingEvents}
                  title="Sincronizza eventi"
                >
                  <FaSyncAlt size={14} className={isLoadingEvents ? 'animate-spin' : ''} />
                </button>
                <div className="flex space-x-1">
                  <button 
                    className={`p-1 rounded-md ${calendarView === 'day' ? 'bg-blue-600 text-white' : 'hover:bg-gray-100'}`}
                    onClick={() => setCalendarView('day')}
                    title="Vista giornaliera"
                  >
                    <FaCalendarDay size={14} />
                  </button>
                  <button 
                    className={`p-1 rounded-md ${calendarView === 'week' ? 'bg-blue-600 text-white' : 'hover:bg-gray-100'}`}
                    onClick={() => setCalendarView('week')}
                    title="Vista settimanale"
                  >
                    <FaCalendarWeek size={14} />
                  </button>
                  <button 
                    className={`p-1 rounded-md ${calendarView === 'month' ? 'bg-blue-600 text-white' : 'hover:bg-gray-100'}`}
                    onClick={() => setCalendarView('month')}
                    title="Vista mensile"
                  >
                    <FaCalendarAlt size={14} />
                  </button>
                </div>
              </div>
            )}
          </div>
          
          <div className="flex items-center justify-between mb-4 border-b pb-2">
            <div className="flex items-center space-x-2">
              <button 
                className="p-1 border border-gray-300 rounded-md hover:bg-gray-100"
                onClick={navigatePrev}
              >
                <FaChevronLeft size={12} />
              </button>
              <button 
                className="px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 text-sm"
                onClick={navigateToday}
              >
                Oggi
              </button>
              <button 
                className="p-1 border border-gray-300 rounded-md hover:bg-gray-100"
                onClick={navigateNext}
              >
                <FaChevronRight size={12} />
              </button>
            </div>
            
            {lastSync && (
              <div className="text-xs text-gray-500">
                Ultimo aggiornamento: {format(lastSync, 'HH:mm', { locale: it })}
              </div>
            )}
          </div>
          
          <div className="overflow-auto h-72">
            {isLoadingEvents ? (
              <div className="flex justify-center items-center h-full">
                <FaSyncAlt size={20} className="text-blue-500 animate-spin mr-2" />
                <span>Caricamento eventi...</span>
              </div>
            ) : (
              renderMonthView()
            )}
          </div>
        </div>
      </div>
      
      {/* Grafici Section */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold text-gray-800">Distribuzione Agenzie</h2>
            <div>
              <select 
                value={filtroStatoDistribuzione} 
                onChange={(e) => setFiltroStatoDistribuzione(e.target.value)}
                className="p-1 border border-gray-300 rounded-md text-sm"
              >
                <option value="Tutte">Tutte</option>
                <option value="In Corso">In Corso</option>
                <option value="Completata">Completate</option>
              </select>
            </div>
          </div>
          <div className="h-72">
            {Object.keys(distribuzioneAgenzie).length > 0 ? (
              <Doughnut 
                data={agenzieData} 
                options={torteOptions}
              />
            ) : (
              <div className="flex items-center justify-center h-full text-gray-500">
                Nessuna pratica di agenzia {filtroStatoDistribuzione === 'Tutte' ? '' : filtroStatoDistribuzione.toLowerCase()}
              </div>
            )}
          </div>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold text-gray-800">Fatturato per Agenzia</h2>
            <div>
              <select 
                value={filtroStatoFatturato} 
                onChange={(e) => setFiltroStatoFatturato(e.target.value)}
                className="p-1 border border-gray-300 rounded-md text-sm"
              >
                <option value="Tutte">Tutte</option>
                <option value="In Corso">In Corso</option>
                <option value="Completata">Completate</option>
              </select>
            </div>
          </div>
          <div className="h-72">
            {Object.keys(fatturatoPerAgenzia).length > 0 ? (
              <Bar 
                data={fatturatoAgenzieData} 
                options={{ 
                  maintainAspectRatio: false,
                  plugins: {
                    legend: {
                      display: false,
                    }
                  },
                  scales: {
                    y: {
                      beginAtZero: true,
                      ticks: {
                        callback: function(value) {
                          return '€' + value.toLocaleString('it-IT');
                        }
                      }
                    }
                  }
                }} 
              />
            ) : (
              <div className="flex items-center justify-center h-full text-gray-500">
                Nessuna pratica di agenzia {filtroStatoFatturato === 'Tutte' ? '' : filtroStatoFatturato.toLowerCase()}
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Scadenze Imminenti */}
      <div className="bg-white p-6 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold text-gray-800 mb-4">Scadenze Imminenti</h2>
        {upcomingDeadlines.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Task
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Pratica
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Data Scadenza
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Priorità
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Azioni
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {upcomingDeadlines.map((task) => {
                  const dueDate = new Date(task.dueDate);
                  const today = new Date();
                  const isOverdue = isPast(dueDate) && !isToday(dueDate);
                  
                  return (
                    <tr 
                      key={`${task.praticaId}-${task.taskIndex}`}
                      className={`hover:bg-gray-100 cursor-pointer ${isOverdue ? 'bg-red-50' : ''}`}
                      onClick={() => setShowTaskDetails(task)}
                    >
                      <td className="px-6 py-3 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900 flex items-center">
                          {task.googleCalendarEventId && <FaCalendarAlt className="text-green-600 mr-2" size={12} />}
                          {task.taskText}
                        </div>
                      </td>
                      <td className="px-6 py-3 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{task.praticaIndirizzo}</div>
                        <div className="text-xs text-gray-500">{task.praticaCliente}</div>
                      </td>
                      <td className="px-6 py-3 whitespace-nowrap">
                        <div className={`text-sm ${isOverdue ? 'text-red-600 font-semibold' : 'text-gray-900'}`}>
                          {format(dueDate, 'dd MMM yyyy HH:mm', { locale: it })}
                          {isOverdue && (
                            <span className="ml-2 text-red-500">
                              <FaExclamationTriangle size={12} className="inline mr-1" />
                              Scaduta
                            </span>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-3 whitespace-nowrap">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                          ${task.priority === 'high' ? 'bg-orange-100 text-orange-800' : 
                            task.priority === 'low' ? 'bg-green-100 text-green-800' : 
                            'bg-blue-100 text-blue-800'}`}
                        >
                          {task.priority === 'high' ? 'Alta' : 
                           task.priority === 'low' ? 'Bassa' : 'Normale'}
                        </span>
                      </td>
                      <td className="px-6 py-3 whitespace-nowrap">
                        <button
                          className="text-green-600 hover:text-green-900 mr-3"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleToggleTask(task.praticaId, task.stepId, task.taskIndex);
                          }}
                        >
                          Completa
                        </button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="text-center py-10 text-gray-500">
            <MdEvent size={40} className="mx-auto mb-2" />
            <p>Nessuna scadenza imminente.</p>
          </div>
        )}
      </div>
      
      {/* Modal per dettagli task */}
      {showTaskDetails && (
        <TaskDetailsModal 
          task={showTaskDetails}
          onClose={() => setShowTaskDetails(null)}
          onComplete={handleToggleTask}
        />
      )}
    </div>
  );
}

export default Dashboard;